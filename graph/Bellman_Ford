ll n, dist[NMAX];
/* int p[NMAX]; */
vector<pair<int, ll>> adj[NMAX];

int bmf(){
    int S;
    for(int i = 0; i < n; i++){
        S = -1;
        for(int x = 1; x <= n; x++)
            for(auto&[nx, t] : adj[x])
                if(dist[x] + t < dist[nx]){
                    dist[nx] = dist[x] + t;
                    /* p[nx] = x; */
                    S = nx;
                }
    }

    if(S == -1) return 1;
    else{    // negative cycle exists
        for(int i = 0; i < n; i++) S = p[S];
        vector<int> cycle;    // find negative cycle
        for(int x = S;; x = p[x]){
            cycle.emplace_back(x);
            if(x == S && cycle.size() > 1) break;
        }
        reverse(all(cycle));
        // have to return cycle
    }
    return;
}
